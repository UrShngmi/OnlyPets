{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/UrShngmi/OnlyPets/blob/main/views.py\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# views.py\n",
        "# Contains all the UI classes and widgets.\n",
        "\n",
        "import sys\n",
        "from PyQt6.QtWidgets import (\n",
        "    QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout, QLabel, QLineEdit,\n",
        "    QPushButton, QGridLayout, QFrame, QScrollArea, QSizePolicy, QSpacerItem,\n",
        "    QStackedWidget, QDialog, QMessageBox, QTabWidget, QFormLayout, QDateEdit,\n",
        "    QCalendarWidget, QProgressBar\n",
        ")\n",
        "from PyQt6.QtGui import QPixmap, QIcon, QFont, QFontDatabase, QColor\n",
        "from PyQt6.QtCore import Qt, QSize, QPropertyAnimation, QUrl\n",
        "from PyQt6.QtMultimedia import QMediaPlayer, QAudioOutput\n",
        "\n",
        "# Global style sheet for consistent theming\n",
        "STYLE_SHEET = \"\"\"\n",
        "QWidget {\n",
        "    font-family: 'Inter', sans-serif;\n",
        "    background-color: #F0F4F8; /* Light Blue-Gray */\n",
        "    color: #334155; /* Dark Slate Blue */\n",
        "}\n",
        "QFrame#main_frame {\n",
        "    background-color: #F8FAFC;\n",
        "    border-radius: 20px;\n",
        "    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n",
        "}\n",
        "#header_frame {\n",
        "    background-color: #DBEAFE; /* Calming Blue */\n",
        "    border-top-left-radius: 20px;\n",
        "    border-top-right-radius: 20px;\n",
        "}\n",
        "QLabel#title_label {\n",
        "    font-size: 36px;\n",
        "    font-weight: 700;\n",
        "    color: #1E293B; /* Darker Slate Blue */\n",
        "    padding: 10px;\n",
        "}\n",
        "QLabel#subtitle_label {\n",
        "    font-size: 18px;\n",
        "    color: #475569;\n",
        "    padding: 0 10px 10px 10px;\n",
        "}\n",
        "QLineEdit, QTextEdit {\n",
        "    background-color: #FFFFFF;\n",
        "    border: 1px solid #CBD5E1;\n",
        "    border-radius: 8px;\n",
        "    padding: 8px;\n",
        "    font-size: 14px;\n",
        "}\n",
        "QLineEdit:focus, QTextEdit:focus {\n",
        "    border: 2px solid #3B82F6; /* Brighter Blue for focus */\n",
        "}\n",
        "QPushButton {\n",
        "    background-color: #F97316; /* Warm Orange */\n",
        "    color: #FFFFFF;\n",
        "    font-size: 16px;\n",
        "    font-weight: 600;\n",
        "    padding: 12px 24px;\n",
        "    border-radius: 12px;\n",
        "    border: none;\n",
        "    transition: background-color 0.3s ease;\n",
        "}\n",
        "QPushButton:hover {\n",
        "    background-color: #EA580C; /* Darker Orange on hover */\n",
        "}\n",
        "QPushButton:pressed {\n",
        "    background-color: #C2410C; /* Even darker on press */\n",
        "}\n",
        "QPushButton#secondary_btn {\n",
        "    background-color: #64748B;\n",
        "}\n",
        "QPushButton#secondary_btn:hover {\n",
        "    background-color: #4B5563;\n",
        "}\n",
        "QDialog {\n",
        "    background-color: #F8FAFC;\n",
        "    border-radius: 16px;\n",
        "}\n",
        "QMessageBox {\n",
        "    background-color: #F8FAFC;\n",
        "}\n",
        "QProgressBar {\n",
        "    border: 1px solid #CBD5E1;\n",
        "    border-radius: 8px;\n",
        "    text-align: center;\n",
        "    background-color: #E2E8F0;\n",
        "}\n",
        "QProgressBar::chunk {\n",
        "    background-color: #F97316;\n",
        "    border-radius: 6px;\n",
        "}\n",
        "QToolTip {\n",
        "    border: 1px solid #1E293B;\n",
        "    background-color: #1E293B;\n",
        "    color: #E2E8F0;\n",
        "    padding: 5px;\n",
        "    border-radius: 6px;\n",
        "    font-size: 12px;\n",
        "}\n",
        "#pet_card, #service_card {\n",
        "    background-color: #FFFFFF;\n",
        "    border: 1px solid #E2E8F0;\n",
        "    border-radius: 12px;\n",
        "    padding: 15px;\n",
        "    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);\n",
        "}\n",
        "#pet_card:hover, #service_card:hover {\n",
        "    transform: scale(1.05);\n",
        "    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n",
        "}\n",
        "\"\"\"\n",
        "\n",
        "class PetCard(QFrame):\n",
        "    \"\"\"A clickable card widget for displaying a pet.\"\"\"\n",
        "    def __init__(self, pet_data, parent=None):\n",
        "        super().__init__(parent)\n",
        "        self.setFrameShape(QFrame.Shape.StyledPanel)\n",
        "        self.setFrameShadow(QFrame.Shadow.Raised)\n",
        "        self.setObjectName(\"pet_card\")\n",
        "        self.setCursor(Qt.CursorShape.PointingHandCursor)\n",
        "        self.setFixedSize(200, 250)\n",
        "        self.pet_data = pet_data\n",
        "\n",
        "        layout = QVBoxLayout()\n",
        "        layout.setSpacing(10)\n",
        "        layout.setContentsMargins(0, 0, 0, 0)\n",
        "\n",
        "        # Image Placeholder\n",
        "        image_label = QLabel()\n",
        "        image_label.setPixmap(self.get_image(pet_data['image_path']).scaled(200, 150, Qt.AspectRatioMode.KeepAspectFit))\n",
        "        image_label.setAlignment(Qt.AlignmentFlag.AlignCenter)\n",
        "        image_label.setObjectName(\"pet_image\")\n",
        "        image_label.setAccessibleName(f\"Photo of {pet_data['name']}\")\n",
        "        layout.addWidget(image_label)\n",
        "\n",
        "        # Pet Info\n",
        "        info_widget = QWidget()\n",
        "        info_layout = QVBoxLayout(info_widget)\n",
        "        info_layout.setContentsMargins(10, 5, 10, 5)\n",
        "\n",
        "        name_label = QLabel(f\"<b>{pet_data['name']}</b>\")\n",
        "        name_label.setAlignment(Qt.AlignmentFlag.AlignCenter)\n",
        "        info_layout.addWidget(name_label)\n",
        "\n",
        "        breed_label = QLabel(f\"<small>{pet_data['breed']}</small>\")\n",
        "        breed_label.setAlignment(Qt.AlignmentFlag.AlignCenter)\n",
        "        info_layout.addWidget(breed_label)\n",
        "\n",
        "        layout.addWidget(info_widget)\n",
        "\n",
        "        self.setLayout(layout)\n",
        "        self.setToolTip(f\"<b>{pet_data['name']}</b><br><small>Age: {pet_data['age']} years</small><br><small>Breed: {pet_data['breed']}</small><br><br>{pet_data['description']}\")\n",
        "\n",
        "    def get_image(self, path):\n",
        "        \"\"\"Loads an image or returns a placeholder.\"\"\"\n",
        "        try:\n",
        "            pixmap = QPixmap(f\"assets/{path}\")\n",
        "            if not pixmap.isNull():\n",
        "                return pixmap\n",
        "        except Exception as e:\n",
        "            pass\n",
        "        # Fallback to a placeholder\n",
        "        placeholder = QPixmap(200, 150)\n",
        "        placeholder.fill(QColor(\"#E2E8F0\"))\n",
        "        # Add a simple dog/cat icon\n",
        "        # Placeholder for qtawesome or custom icon\n",
        "        return placeholder\n",
        "\n",
        "class ServiceCard(QFrame):\n",
        "    \"\"\"A clickable card widget for a service.\"\"\"\n",
        "    def __init__(self, service_data, parent=None):\n",
        "        super().__init__(parent)\n",
        "        self.setFrameShape(QFrame.Shape.StyledPanel)\n",
        "        self.setFrameShadow(QFrame.Shadow.Raised)\n",
        "        self.setObjectName(\"service_card\")\n",
        "        self.setCursor(Qt.CursorShape.PointingHandCursor)\n",
        "        self.setFixedSize(200, 250)\n",
        "        self.service_data = service_data\n",
        "\n",
        "        layout = QVBoxLayout()\n",
        "        layout.setSpacing(10)\n",
        "        layout.setContentsMargins(10, 10, 10, 10)\n",
        "\n",
        "        # Service Name\n",
        "        name_label = QLabel(f\"<b>{service_data['name']}</b>\")\n",
        "        name_label.setAlignment(Qt.AlignmentFlag.AlignCenter)\n",
        "        layout.addWidget(name_label)\n",
        "\n",
        "        # Service Description\n",
        "        desc_label = QLabel(service_data['description'])\n",
        "        desc_label.setWordWrap(True)\n",
        "        desc_label.setAlignment(Qt.AlignmentFlag.AlignCenter)\n",
        "        layout.addWidget(desc_label)\n",
        "\n",
        "        # Price\n",
        "        price_label = QLabel(f\"<br><b>${service_data['price']:.2f}</b>\")\n",
        "        price_label.setAlignment(Qt.AlignmentFlag.AlignCenter)\n",
        "        layout.addWidget(price_label)\n",
        "\n",
        "        layout.addStretch()\n",
        "        self.setLayout(layout)\n",
        "\n",
        "class Breadcrumbs(QFrame):\n",
        "    \"\"\"Custom widget for breadcrumb navigation.\"\"\"\n",
        "    def __init__(self, parent=None):\n",
        "        super().__init__(parent)\n",
        "        self.layout = QHBoxLayout()\n",
        "        self.layout.setContentsMargins(0, 0, 0, 0)\n",
        "        self.layout.setSpacing(5)\n",
        "        self.setLayout(self.layout)\n",
        "        self.setObjectName(\"breadcrumbs\")\n",
        "        self.steps = []\n",
        "\n",
        "    def set_steps(self, steps):\n",
        "        \"\"\"Sets the breadcrumb steps.\"\"\"\n",
        "        # Clear existing buttons\n",
        "        for i in reversed(range(self.layout.count())):\n",
        "            widget = self.layout.itemAt(i).widget()\n",
        "            if widget:\n",
        "                widget.setParent(None)\n",
        "\n",
        "        self.steps = steps\n",
        "        for i, step in enumerate(steps):\n",
        "            btn = QPushButton(step)\n",
        "            btn.setObjectName(\"breadcrumb_btn\")\n",
        "            btn.setFlat(True)\n",
        "            btn.setCursor(Qt.CursorShape.PointingHandCursor)\n",
        "            self.layout.addWidget(btn)\n",
        "            if i < len(steps) - 1:\n",
        "                arrow = QLabel(\" > \")\n",
        "                self.layout.addWidget(arrow)\n",
        "\n",
        "class MainView(QMainWindow):\n",
        "    \"\"\"The main window of the application, managing all sub-views.\"\"\"\n",
        "\n",
        "    # Signals for communicating with the controller\n",
        "    navigate_to_pet_details = pyqtSignal(int)\n",
        "    navigate_to_service_details = pyqtSignal(int)\n",
        "    search_triggered = pyqtSignal(str)\n",
        "    filter_triggered = pyqtSignal(dict)\n",
        "\n",
        "    def __init__(self, parent=None):\n",
        "        super().__init__(parent)\n",
        "        self.setWindowTitle(\"OnlyPets - Pet Adoption & Services\")\n",
        "        self.setMinimumSize(800, 600)\n",
        "        self.setStyleSheet(STYLE_SHEET)\n",
        "\n",
        "        self.stacked_widget = QStackedWidget()\n",
        "        self.setCentralWidget(self.stacked_widget)\n",
        "\n",
        "        # Create all views\n",
        "        self.home_view = self.create_home_view()\n",
        "        self.pet_list_view = self.create_pet_list_view()\n",
        "        self.service_list_view = self.create_service_list_view()\n",
        "        self.user_dashboard_view = self.create_user_dashboard_view()\n",
        "\n",
        "        self.stacked_widget.addWidget(self.home_view)\n",
        "        self.stacked_widget.addWidget(self.pet_list_view)\n",
        "        self.stacked_widget.addWidget(self.service_list_view)\n",
        "        self.stacked_widget.addWidget(self.user_dashboard_view)\n",
        "\n",
        "        self.setup_ui()\n",
        "        self.show_home_view()\n",
        "\n",
        "    def setup_ui(self):\n",
        "        \"\"\"Sets up the main layout and widgets.\"\"\"\n",
        "        self.main_frame = QFrame()\n",
        "        self.main_frame.setObjectName(\"main_frame\")\n",
        "        self.main_layout = QVBoxLayout(self.main_frame)\n",
        "\n",
        "        # Header Frame\n",
        "        header_frame = QFrame()\n",
        "        header_frame.setObjectName(\"header_frame\")\n",
        "        header_layout = QVBoxLayout(header_frame)\n",
        "        self.title_label = QLabel(\"OnlyPets\")\n",
        "        self.title_label.setObjectName(\"title_label\")\n",
        "        self.subtitle_label = QLabel(\"Your one-stop shop for pet adoption and care.\")\n",
        "        self.subtitle_label.setObjectName(\"subtitle_label\")\n",
        "        header_layout.addWidget(self.title_label, alignment=Qt.AlignmentFlag.AlignCenter)\n",
        "        header_layout.addWidget(self.subtitle_label, alignment=Qt.AlignmentFlag.AlignCenter)\n",
        "\n",
        "        # Top bar with login/logout\n",
        "        self.top_bar = QFrame()\n",
        "        self.top_bar_layout = QHBoxLayout(self.top_bar)\n",
        "        self.user_label = QLabel(\"Guest\")\n",
        "        self.auth_button = QPushButton(\"Login / Signup\")\n",
        "        self.auth_button.setObjectName(\"secondary_btn\")\n",
        "        self.top_bar_layout.addWidget(self.user_label)\n",
        "        self.top_bar_layout.addStretch()\n",
        "        self.top_bar_layout.addWidget(self.auth_button)\n",
        "\n",
        "        # Breadcrumbs and progress bar\n",
        "        self.progress_frame = QFrame()\n",
        "        self.progress_layout = QVBoxLayout(self.progress_frame)\n",
        "        self.breadcrumbs = Breadcrumbs()\n",
        "        self.progress_bar = QProgressBar()\n",
        "        self.progress_bar.setRange(0, 100)\n",
        "        self.progress_layout.addWidget(self.breadcrumbs)\n",
        "        self.progress_layout.addWidget(self.progress_bar)\n",
        "\n",
        "        self.main_layout.addWidget(self.top_bar)\n",
        "        self.main_layout.addWidget(self.progress_frame)\n",
        "        self.main_layout.addWidget(self.stacked_widget)\n",
        "        self.setCentralWidget(self.main_frame)\n",
        "\n",
        "    def create_home_view(self):\n",
        "        \"\"\"Creates the main home dashboard view.\"\"\"\n",
        "        home_widget = QWidget()\n",
        "        layout = QVBoxLayout(home_widget)\n",
        "\n",
        "        # Sections for Pets and Services\n",
        "        self.pets_section = self.create_section(\"Adopt a Pet\", \"See All Pets\")\n",
        "        self.services_section = self.create_section(\"Book Services\", \"See All Services\")\n",
        "\n",
        "        layout.addWidget(self.pets_section)\n",
        "        layout.addWidget(self.services_section)\n",
        "        layout.addStretch()\n",
        "\n",
        "        return home_widget\n",
        "\n",
        "    def create_user_dashboard_view(self):\n",
        "        \"\"\"Creates the personalized user dashboard view.\"\"\"\n",
        "        dashboard_widget = QWidget()\n",
        "        layout = QVBoxLayout(dashboard_widget)\n",
        "\n",
        "        self.welcome_label = QLabel(\"Welcome, User!\")\n",
        "        self.welcome_label.setFont(QFont(\"Inter\", 24, QFont.Bold))\n",
        "        self.welcome_label.setAlignment(Qt.AlignmentFlag.AlignCenter)\n",
        "        layout.addWidget(self.welcome_label)\n",
        "\n",
        "        self.adoptions_section = self.create_user_section(\"Your Adopted Pets\")\n",
        "        self.bookings_section = self.create_user_section(\"Your Service Bookings\")\n",
        "\n",
        "        layout.addWidget(self.adoptions_section)\n",
        "        layout.addWidget(self.bookings_section)\n",
        "        layout.addStretch()\n",
        "\n",
        "        return dashboard_widget\n",
        "\n",
        "    def create_user_section(self, title):\n",
        "        \"\"\"Helper to create a section for the user dashboard.\"\"\"\n",
        "        frame = QFrame()\n",
        "        frame_layout = QVBoxLayout(frame)\n",
        "\n",
        "        section_label = QLabel(f\"<h3>{title}</h3>\")\n",
        "        frame_layout.addWidget(section_label)\n",
        "\n",
        "        grid = QGridLayout()\n",
        "        # Placeholder grid, populated by controller\n",
        "        frame_layout.addLayout(grid)\n",
        "        return frame\n",
        "\n",
        "    def create_section(self, title, button_text):\n",
        "        \"\"\"Helper to create a browsable section for the home view.\"\"\"\n",
        "        frame = QFrame()\n",
        "        layout = QVBoxLayout(frame)\n",
        "\n",
        "        # Header\n",
        "        header_layout = QHBoxLayout()\n",
        "        header_layout.addWidget(QLabel(f\"<h2>{title}</h2>\"))\n",
        "        header_layout.addStretch()\n",
        "        view_all_btn = QPushButton(button_text)\n",
        "        view_all_btn.setObjectName(\"secondary_btn\")\n",
        "        header_layout.addWidget(view_all_btn)\n",
        "        layout.addLayout(header_layout)\n",
        "\n",
        "        # Placeholder grid, will be populated by controller\n",
        "        grid_widget = QWidget()\n",
        "        self.grid_layout = QGridLayout(grid_widget)\n",
        "        self.grid_layout.setContentsMargins(0, 0, 0, 0)\n",
        "        self.grid_layout.setSpacing(15)\n",
        "        self.grid_layout.setAlignment(Qt.AlignmentFlag.AlignTop | Qt.AlignmentFlag.AlignHCenter)\n",
        "        layout.addWidget(grid_widget)\n",
        "\n",
        "        return frame\n",
        "\n",
        "    def create_pet_list_view(self):\n",
        "        \"\"\"Creates the full pet browsing view.\"\"\"\n",
        "        pet_list_widget = QWidget()\n",
        "        layout = QVBoxLayout(pet_list_widget)\n",
        "\n",
        "        self.search_input = QLineEdit()\n",
        "        self.search_input.setPlaceholderText(\"Search for a pet...\")\n",
        "        self.search_btn = QPushButton(\"Search\")\n",
        "\n",
        "        search_layout = QHBoxLayout()\n",
        "        search_layout.addWidget(self.search_input)\n",
        "        search_layout.addWidget(self.search_btn)\n",
        "        layout.addLayout(search_layout)\n",
        "\n",
        "        # Scroll area for pet cards\n",
        "        scroll_area = QScrollArea()\n",
        "        scroll_area.setWidgetResizable(True)\n",
        "        scroll_area.setHorizontalScrollBarPolicy(Qt.ScrollBarPolicy.ScrollBarAlwaysOff)\n",
        "\n",
        "        self.pet_grid_widget = QWidget()\n",
        "        self.pet_grid_layout = QGridLayout(self.pet_grid_widget)\n",
        "        self.pet_grid_layout.setSpacing(20)\n",
        "        self.pet_grid_layout.setAlignment(Qt.AlignmentFlag.AlignTop | Qt.AlignmentFlag.AlignHCenter)\n",
        "\n",
        "        scroll_area.setWidget(self.pet_grid_widget)\n",
        "        layout.addWidget(scroll_area)\n",
        "\n",
        "        return pet_list_widget\n",
        "\n",
        "    def create_service_list_view(self):\n",
        "        \"\"\"Creates the full service browsing view.\"\"\"\n",
        "        service_list_widget = QWidget()\n",
        "        layout = QVBoxLayout(service_list_widget)\n",
        "\n",
        "        self.service_search_input = QLineEdit()\n",
        "        self.service_search_input.setPlaceholderText(\"Search for a service...\")\n",
        "        self.service_search_btn = QPushButton(\"Search\")\n",
        "\n",
        "        search_layout = QHBoxLayout()\n",
        "        search_layout.addWidget(self.service_search_input)\n",
        "        search_layout.addWidget(self.service_search_btn)\n",
        "        layout.addLayout(search_layout)\n",
        "\n",
        "        # Scroll area for service cards\n",
        "        scroll_area = QScrollArea()\n",
        "        scroll_area.setWidgetResizable(True)\n",
        "        scroll_area.setHorizontalScrollBarPolicy(Qt.ScrollBarPolicy.ScrollBarAlwaysOff)\n",
        "\n",
        "        self.service_grid_widget = QWidget()\n",
        "        self.service_grid_layout = QGridLayout(self.service_grid_widget)\n",
        "        self.service_grid_layout.setSpacing(20)\n",
        "        self.service_grid_layout.setAlignment(Qt.AlignmentFlag.AlignTop | Qt.AlignmentFlag.AlignHCenter)\n",
        "\n",
        "        scroll_area.setWidget(self.service_grid_widget)\n",
        "        layout.addWidget(scroll_area)\n",
        "\n",
        "        return service_list_widget\n",
        "\n",
        "    def clear_grid_layout(self, layout):\n",
        "        \"\"\"Helper to clear a grid layout.\"\"\"\n",
        "        if layout is not None:\n",
        "            while layout.count():\n",
        "                child = layout.takeAt(0)\n",
        "                if child.widget() is not None:\n",
        "                    child.widget().deleteLater()\n",
        "\n",
        "    def show_home_view(self):\n",
        "        \"\"\"Displays the home view.\"\"\"\n",
        "        self.stacked_widget.setCurrentWidget(self.home_view)\n",
        "\n",
        "    def show_pet_list_view(self):\n",
        "        \"\"\"Displays the pet list view.\"\"\"\n",
        "        self.stacked_widget.setCurrentWidget(self.pet_list_view)\n",
        "\n",
        "    def show_service_list_view(self):\n",
        "        \"\"\"Displays the service list view.\"\"\"\n",
        "        self.stacked_widget.setCurrentWidget(self.service_list_view)\n",
        "\n",
        "    def show_user_dashboard(self, username):\n",
        "        \"\"\"Displays the personalized user dashboard.\"\"\"\n",
        "        self.welcome_label.setText(f\"Welcome, {username}!\")\n",
        "        self.stacked_widget.setCurrentWidget(self.user_dashboard_view)\n",
        "\n",
        "    def display_pets(self, pet_data_list):\n",
        "        \"\"\"Populates the pet grid with cards.\"\"\"\n",
        "        self.clear_grid_layout(self.pet_grid_layout)\n",
        "        col_count = 4\n",
        "        for i, pet_data in enumerate(pet_data_list):\n",
        "            card = PetCard(pet_data)\n",
        "            self.pet_grid_layout.addWidget(card, i // col_count, i % col_count)\n",
        "\n",
        "    def display_services(self, service_data_list):\n",
        "        \"\"\"Populates the service grid with cards.\"\"\"\n",
        "        self.clear_grid_layout(self.service_grid_layout)\n",
        "        col_count = 4\n",
        "        for i, service_data in enumerate(service_data_list):\n",
        "            card = ServiceCard(service_data)\n",
        "            self.service_grid_layout.addWidget(card, i // col_count, i % col_count)\n",
        "\n",
        "class AuthDialog(QDialog):\n",
        "    \"\"\"Modal dialog for user authentication (login/signup).\"\"\"\n",
        "\n",
        "    login_attempt = pyqtSignal(str, str)\n",
        "    signup_attempt = pyqtSignal(str, str, str)\n",
        "\n",
        "    def __init__(self, parent=None):\n",
        "        super().__init__(parent)\n",
        "        self.setWindowTitle(\"Authentication\")\n",
        "        self.setFixedSize(400, 450)\n",
        "        self.setModal(True)\n",
        "        self.setStyleSheet(STYLE_SHEET)\n",
        "\n",
        "        layout = QVBoxLayout(self)\n",
        "        self.tab_widget = QTabWidget()\n",
        "        self.tab_widget.addTab(self.create_login_tab(), \"Login\")\n",
        "        self.tab_widget.addTab(self.create_signup_tab(), \"Signup\")\n",
        "\n",
        "        layout.addWidget(self.tab_widget)\n",
        "\n",
        "    def create_login_tab(self):\n",
        "        \"\"\"Creates the login form tab.\"\"\"\n",
        "        login_widget = QWidget()\n",
        "        form_layout = QFormLayout(login_widget)\n",
        "\n",
        "        self.login_username_input = QLineEdit()\n",
        "        self.login_username_input.setPlaceholderText(\"Enter your username\")\n",
        "        self.login_password_input = QLineEdit()\n",
        "        self.login_password_input.setPlaceholderText(\"Enter your password\")\n",
        "        self.login_password_input.setEchoMode(QLineEdit.EchoMode.Password)\n",
        "\n",
        "        login_btn = QPushButton(\"Login\")\n",
        "        login_btn.clicked.connect(self.on_login_click)\n",
        "\n",
        "        self.login_error_label = QLabel(\"\")\n",
        "        self.login_error_label.setStyleSheet(\"color: #EF4444;\")\n",
        "\n",
        "        form_layout.addRow(\"Username:\", self.login_username_input)\n",
        "        form_layout.addRow(\"Password:\", self.login_password_input)\n",
        "        form_layout.addRow(\"\", login_btn)\n",
        "        form_layout.addRow(\"\", self.login_error_label)\n",
        "\n",
        "        return login_widget\n",
        "\n",
        "    def create_signup_tab(self):\n",
        "        \"\"\"Creates the signup form tab.\"\"\"\n",
        "        signup_widget = QWidget()\n",
        "        form_layout = QFormLayout(signup_widget)\n",
        "\n",
        "        self.signup_username_input = QLineEdit()\n",
        "        self.signup_username_input.setPlaceholderText(\"Choose a username\")\n",
        "        self.signup_email_input = QLineEdit()\n",
        "        self.signup_email_input.setPlaceholderText(\"Enter your email\")\n",
        "        self.signup_password_input = QLineEdit()\n",
        "        self.signup_password_input.setPlaceholderText(\"Create a password\")\n",
        "        self.signup_password_input.setEchoMode(QLineEdit.EchoMode.Password)\n",
        "\n",
        "        self.signup_username_input.textChanged.connect(self.validate_signup_form)\n",
        "        self.signup_email_input.textChanged.connect(self.validate_signup_form)\n",
        "        self.signup_password_input.textChanged.connect(self.validate_signup_form)\n",
        "\n",
        "        signup_btn = QPushButton(\"Sign Up\")\n",
        "        signup_btn.clicked.connect(self.on_signup_click)\n",
        "\n",
        "        self.signup_error_label = QLabel(\"\")\n",
        "        self.signup_error_label.setStyleSheet(\"color: #EF4444;\")\n",
        "\n",
        "        form_layout.addRow(\"Username:\", self.signup_username_input)\n",
        "        form_layout.addRow(\"Email:\", self.signup_email_input)\n",
        "        form_layout.addRow(\"Password:\", self.signup_password_input)\n",
        "        form_layout.addRow(\"\", signup_btn)\n",
        "        form_layout.addRow(\"\", self.signup_error_label)\n",
        "\n",
        "        return signup_widget\n",
        "\n",
        "    def validate_signup_form(self):\n",
        "        \"\"\"Performs basic form validation on the fly.\"\"\"\n",
        "        username = self.signup_username_input.text().strip()\n",
        "        email = self.signup_email_input.text().strip()\n",
        "        password = self.signup_password_input.text().strip()\n",
        "\n",
        "        is_valid = True\n",
        "\n",
        "        if not username:\n",
        "            self.signup_username_input.setStyleSheet(\"border: 2px solid #EF4444;\")\n",
        "            self.signup_username_input.setToolTip(\"Username cannot be empty.\")\n",
        "            is_valid = False\n",
        "        else:\n",
        "            self.signup_username_input.setStyleSheet(\"\")\n",
        "            self.signup_username_input.setToolTip(\"\")\n",
        "\n",
        "        if not email or \"@\" not in email:\n",
        "            self.signup_email_input.setStyleSheet(\"border: 2px solid #EF4444;\")\n",
        "            self.signup_email_input.setToolTip(\"Please enter a valid email address.\")\n",
        "            is_valid = False\n",
        "        else:\n",
        "            self.signup_email_input.setStyleSheet(\"\")\n",
        "            self.signup_email_input.setToolTip(\"\")\n",
        "\n",
        "        if len(password) < 6:\n",
        "            self.signup_password_input.setStyleSheet(\"border: 2px solid #EF4444;\")\n",
        "            self.signup_password_input.setToolTip(\"Password must be at least 6 characters long.\")\n",
        "            is_valid = False\n",
        "        else:\n",
        "            self.signup_password_input.setStyleSheet(\"\")\n",
        "            self.signup_password_input.setToolTip(\"\")\n",
        "\n",
        "        return is_valid\n",
        "\n",
        "    def on_login_click(self):\n",
        "        username = self.login_username_input.text().strip()\n",
        "        password = self.login_password_input.text().strip()\n",
        "        if username and password:\n",
        "            self.login_attempt.emit(username, password)\n",
        "        else:\n",
        "            self.login_error_label.setText(\"Please enter username and password.\")\n",
        "\n",
        "    def on_signup_click(self):\n",
        "        if self.validate_signup_form():\n",
        "            username = self.signup_username_input.text().strip()\n",
        "            email = self.signup_email_input.text().strip()\n",
        "            password = self.signup_password_input.text().strip()\n",
        "            self.signup_attempt.emit(username, email, password)\n",
        "        else:\n",
        "            self.signup_error_label.setText(\"Please fix the highlighted errors.\")\n",
        "\n",
        "class PetDetailsDialog(QDialog):\n",
        "    \"\"\"Modal dialog for displaying detailed pet information.\"\"\"\n",
        "    adopt_pet = pyqtSignal(dict)\n",
        "\n",
        "    def __init__(self, pet_data, parent=None):\n",
        "        super().__init__(parent)\n",
        "        self.pet_data = pet_data\n",
        "        self.setWindowTitle(f\"Meet {pet_data['name']}\")\n",
        "        self.setFixedSize(600, 600)\n",
        "        self.setStyleSheet(STYLE_SHEET)\n",
        "\n",
        "        layout = QVBoxLayout(self)\n",
        "\n",
        "        info_layout = QHBoxLayout()\n",
        "        image_label = QLabel()\n",
        "        image_label.setPixmap(QPixmap(f\"assets/{pet_data['image_path']}\").scaled(250, 250, Qt.AspectRatioMode.KeepAspectFit))\n",
        "        image_label.setAccessibleName(f\"Photo of {pet_data['name']}\")\n",
        "        info_layout.addWidget(image_label)\n",
        "\n",
        "        details_layout = QVBoxLayout()\n",
        "        details_layout.addWidget(QLabel(f\"<h2>{pet_data['name']}</h2>\"))\n",
        "        details_layout.addWidget(QLabel(f\"<b>Breed:</b> {pet_data['breed']}\"))\n",
        "        details_layout.addWidget(QLabel(f\"<b>Age:</b> {pet_data['age']} years\"))\n",
        "        details_layout.addWidget(QLabel(f\"<b>Description:</b><br>{pet_data['description']}\"))\n",
        "        details_layout.addStretch()\n",
        "\n",
        "        info_layout.addLayout(details_layout)\n",
        "        layout.addLayout(info_layout)\n",
        "\n",
        "        adopt_btn = QPushButton(f\"Adopt {pet_data['name']}\")\n",
        "        adopt_btn.clicked.connect(lambda: self.adopt_pet.emit(self.pet_data))\n",
        "        layout.addWidget(adopt_btn)\n",
        "\n",
        "class AdoptionFormDialog(QDialog):\n",
        "    \"\"\"Modal dialog for the adoption application form.\"\"\"\n",
        "    form_submitted = pyqtSignal(dict)\n",
        "\n",
        "    def __init__(self, pet_data, parent=None):\n",
        "        super().__init__(parent)\n",
        "        self.pet_data = pet_data\n",
        "        self.setWindowTitle(f\"Adopt {pet_data['name']}\")\n",
        "        self.setFixedSize(500, 400)\n",
        "        self.setStyleSheet(STYLE_SHEET)\n",
        "\n",
        "        layout = QVBoxLayout(self)\n",
        "        layout.addWidget(QLabel(f\"<h2>Adoption Application for {pet_data['name']}</h2>\"))\n",
        "\n",
        "        form_layout = QFormLayout()\n",
        "        self.name_input = QLineEdit()\n",
        "        self.email_input = QLineEdit()\n",
        "        self.reason_input = QLineEdit()\n",
        "\n",
        "        form_layout.addRow(\"Your Name:\", self.name_input)\n",
        "        form_layout.addRow(\"Your Email:\", self.email_input)\n",
        "        form_layout.addRow(\"Reason for Adoption:\", self.reason_input)\n",
        "\n",
        "        layout.addLayout(form_layout)\n",
        "\n",
        "        submit_btn = QPushButton(\"Submit Application\")\n",
        "        submit_btn.clicked.connect(self.on_submit)\n",
        "        layout.addWidget(submit_btn)\n",
        "\n",
        "    def on_submit(self):\n",
        "        data = {\n",
        "            \"name\": self.name_input.text(),\n",
        "            \"email\": self.email_input.text(),\n",
        "            \"reason\": self.reason_input.text(),\n",
        "            \"pet_id\": self.pet_data['id']\n",
        "        }\n",
        "        self.form_submitted.emit(data)\n",
        "        self.accept()\n",
        "\n",
        "class ServiceDetailsDialog(QDialog):\n",
        "    \"\"\"Modal dialog for a service's details.\"\"\"\n",
        "    book_service = pyqtSignal(dict)\n",
        "\n",
        "    def __init__(self, service_data, parent=None):\n",
        "        super().__init__(parent)\n",
        "        self.service_data = service_data\n",
        "        self.setWindowTitle(f\"Service: {service_data['name']}\")\n",
        "        self.setFixedSize(500, 400)\n",
        "        self.setStyleSheet(STYLE_SHEET)\n",
        "\n",
        "        layout = QVBoxLayout(self)\n",
        "        layout.addWidget(QLabel(f\"<h2>{service_data['name']}</h2>\"))\n",
        "        layout.addWidget(QLabel(f\"<b>Price:</b> ${service_data['price']:.2f}\"))\n",
        "        layout.addWidget(QLabel(f\"<br><b>Description:</b><br>{service_data['description']}\"))\n",
        "\n",
        "        layout.addStretch()\n",
        "\n",
        "        book_btn = QPushButton(f\"Book This Service\")\n",
        "        book_btn.clicked.connect(lambda: self.book_service.emit(self.service_data))\n",
        "        layout.addWidget(book_btn)\n",
        "\n",
        "class ScheduleDialog(QDialog):\n",
        "    \"\"\"Modal dialog for scheduling a service.\"\"\"\n",
        "    schedule_selected = pyqtSignal(str)\n",
        "\n",
        "    def __init__(self, parent=None):\n",
        "        super().__init__(parent)\n",
        "        self.setWindowTitle(\"Schedule Your Service\")\n",
        "        self.setFixedSize(400, 450)\n",
        "        self.setStyleSheet(STYLE_SHEET)\n",
        "\n",
        "        layout = QVBoxLayout(self)\n",
        "        layout.addWidget(QLabel(\"<h2>Select a Date</h2>\"))\n",
        "\n",
        "        self.calendar = QCalendarWidget()\n",
        "        layout.addWidget(self.calendar)\n",
        "\n",
        "        select_btn = QPushButton(\"Select Date & Continue\")\n",
        "        select_btn.clicked.connect(self.on_select)\n",
        "        layout.addWidget(select_btn)\n",
        "\n",
        "    def on_select(self):\n",
        "        selected_date = self.calendar.selectedDate().toString(Qt.DateFormat.ISODate)\n",
        "        self.schedule_selected.emit(selected_date)\n",
        "        self.accept()\n",
        "\n",
        "class ConfirmationDialog(QDialog):\n",
        "    \"\"\"Modal dialog for confirmation message.\"\"\"\n",
        "    def __init__(self, message, parent=None):\n",
        "        super().__init__(parent)\n",
        "        self.setWindowTitle(\"Confirmation\")\n",
        "        self.setFixedSize(400, 200)\n",
        "        self.setStyleSheet(STYLE_SHEET)\n",
        "\n",
        "        layout = QVBoxLayout(self)\n",
        "        label = QLabel(f\"<h3 align='center'>{message}</h3>\")\n",
        "        label.setWordWrap(True)\n",
        "        layout.addWidget(label)\n",
        "\n",
        "        ok_btn = QPushButton(\"OK\")\n",
        "        ok_btn.clicked.connect(self.accept)\n",
        "        layout.addWidget(ok_btn)"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "id": "9hMRCNMVvnG2"
      }
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}